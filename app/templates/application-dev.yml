logging:
  level:
    <%= packageroot %>: INFO
    org.springframework.boot.context: INFO
server:
  compression:
    enabled: true
  port: <%=portNumber%>
  servlet: 
    context-path: /<%=artifact%>
<% if (swagger) { %>springfox:
  documentation:
    swagger.v2.path: /v2/api-docs
    info:
      title: 
      description: <%= apptitle %> Docs.
      version: 1.0
    base-package: <%= packageroot %><% } %>
<% if (actuator || metricsinflux) { %>management:
  server:
    port: 9090
  endpoints:
    web:
      exposure:
        include: '*'<% } %>
<% if (metricsinflux) { %>  metrics:
    export:
      influx:
        db: <%=artifact%>
        uri: http://localhost:8086<% } %>
spring:
  messages:
    basename: i18n/messages
<% if (redis) { %>  cache:
    type: redis<% } %>
<% if (mongodb) { %>  data:
    mongodb:
      host: localhost
      port: 27017
      database: <%=artifact%>
      username: <%=artifact%>
      password: <%=randomPasswd%><% } %>
<% if (postgres) { %>  datasource:
    platform: postgresql
    url: jdbc:postgresql://localhost:5432/postgres
    username: postgres
    password: <%=randomPasswd%>
    continue-on-error: true<% } %>
<% if (jpa) { %>  jpa:
    hibernate:
      ddl-auto: update
    database: <%=databaseJpa%>
    database-platform: org.hibernate.dialect.<%=databaseDialect%>
    properties:
      hibernate:
        jdbc:
          lob:
            non_contextual_creation: true<% } %>
<% if (rabbit) { %>  rabbitmq:
    host: localhost
    port: 5672
    username: <%=artifact%>
    password: <%=randomPasswd%>
    virtual-host: /
    connection-timeout: 9000<% } %>
<% if (kafka) { %>  kafka:
    consumer:
      bootstrap-servers: localhost:9092
      group-id: <%=kafkaGroupId%>
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    producer:
      bootstrap-servers: localhost:9092
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer<% } %>
<% if (cloud) { %>  cloud:
    stream:
      bindings:
        <%=artifact%>_output:
          destination: <%=artifact%>-output
          contentType: application/json
          producer:
            headerMode: raw
        <%=artifact%>_input:
          destination: <%=artifact%>-input
          contentType: application/json
          consumer:
            maxAttempts: 3
            headerMode: raw
<% } %>